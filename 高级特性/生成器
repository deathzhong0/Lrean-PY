#！/usr/bin/python
# -*- coding: utf-8 -*-
L = [x for x in range(1,11)]
print(L)
G = (x for x in range(1,11))
print(G)
#创建L和G的区别仅在于最外层的[]和()，L是一个list，而g是一个generator

print(next(G))
for n in G:
    print(n)

def fib(max):
    n,a,b = 0,0,1
    while n < max:
        print(b)
        a,b = b,a+b
        n= n+1
    return 'done'

print(fib(10))
print('*'*20)

def fib1(max):
    n,a,b = 0,0,1
    while n < max:
        #yield:生成一个generator看起来像函数调用;
        # 每执行到一个yield语句就会中断并返回一个迭代值下次执行时从yield的下一个语句继续执行
        yield b     
        a,b = b,a+b
        n= n+1
    return 'done'

print(fib1(5))
print('-'*30)
for n in fib1(5):
    print(n)
print('-'*30)

def oll():
    print('step 1')
    yield 1
    print('step 3')
    yield 3
    print('step 5')
    yield 5

o = oll()
print(next(o))
print(next(oll()))  #next函数是无法让生成器执行下一个生成器，要next生成器才能让生成器继续进行执行
print(next(oll()))
print(next(o))

w = fib1(6)
while True :
    try:
        x = next(w)
        print('w=',x)
    #用for循环调用generator时，发现拿不到generator的return语句的返回值。
    #如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中
    except StopIteration as e:      
        print('Generator return value:',e.value)
        break


#杨辉三角定义如下：
'''
          1
         / \
        1   1
       / \ / \
      1   2   1
     / \ / \ / \
    1   3   3   1
   / \ / \ / \ / \
  1   4   6   4   1
 / \ / \ / \ / \ / \
1   5   10  10  5   1
把每一行看做一个list，试写一个generator，不断输出下一行的list：
'''
def triangles():
    L = [1]
    n1 = 0
    mumber = [1]
    while True:
        yield L
         
        #L = [sum(i) for i in zip([0]+L, L+[0])]  
        
        L=[1]+[L[x]+L[x+1] for x in range(len(L)-1)]+[1]    

        
        



# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')