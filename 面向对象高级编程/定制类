#!/usr/bin/env python
# -*- coding: utf-8 -*-
class Student(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    __repr__ = __str__  #但是通常__str__()和__repr__()代码都是一样的，所以，有个偷懒的写法


#两者的区别是__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，
# 也就是说，__repr__()是为调试服务的。

#解决办法是再定义一个__repr__()。但是通常__str__()和__repr__()代码都是一样的，所以，有个偷懒的写法：
s = Student('DZ')
s


#如果一个类想被用于for ... in循环，类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象，
# 然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。
class Fib(object):
    def __init__(self):
        self.a = 0
        self.b = 1

    def __iter__(self):
        return self

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a > 1000000:
            raise StopIteration()
        return self.a


for n in Fib():
    print(n)

#__getitem__

#Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：
#Fib()[5]


#要表现得像list那样按照下标取出元素，需要实现__getitem__()方法：
class Fib1(object):
    def __getitem__(self, n):
        a, b = 1, 1
        for x in range(n):
            a, b = b, a + b
        return a


f = Fib1()
f[1]
f[10]

#但是list有个神奇的切片方法：


#>>> list(range(100))[5:10]
#[5, 6, 7, 8, 9]
#对于Fib却报错。原因是__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice，所以要做判断：
class Fib2(object):
    def __getitem__(self, n1):
        if isinstance(n1, int):

            a, b = 1, 1
            for x in range(n1):
                a, b = b, a + b
            return a
        if isinstance(n1, slice):
            start = n1.start
            stop = n1.stop
            if start is None:
                statr = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(x)
                a, b = b, a + b
            return L
f = Fib2()
f[0:6]

#除了可以加上一个score属性外，Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。修改如下：
class student1(object):
    def __init__(self):
        self.name = 'DZ'
    
    def __getattr__(self,attr):
        if attr =='score':
            return lambda:25

#调用name属性，没问题，但是，调用不存在的score属性，就有问题了：
#要避免这个错误，除了可以加上一个score属性外，
#当调用不存在的属性时，比如score，
# Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值：
s = student1()
s.score



class Chain(object):
    def __init__(self,path=''):
        self._path = path
    
    def __getattr__(self,path):
        return Chain('%s/%s' %(self._path,path))  
    #self._path默认是空的，而Chain().status.user.timeline.list实际为
    # Chain((Chain(Chain().status).user).timeline).list
    def __str__(self):
        return self._path

    __repr__ = __str__

print(Chain().status.user.timeline.list)

#__call__

#一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用instance.method()来调用。
# 能不能直接在实例本身上调用呢？在Python中，答案是肯定的。

#任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用。请看示例：

class Student2(object):
    def __init__(self,name):
        self._name = name
    
    def __call__(self):
        print('my xxx is %s'% self._name)

s2 = Student2('DZ')
s2()
#__call__()还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，
# 所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。

#如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，
# 因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。

#那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，
# 能被调用的对象就是一个Callable对象，比如函数和我们上面定义的带有__call__()的类实例：
print(callable(Student2('DZ')))

#通过callable()函数，我们就可以判断一个对象是否是“可调用”对象。