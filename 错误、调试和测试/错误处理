#!/usr/bin/env python
# -*- coding:utf-8 -*-

#在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，就可以知道是否有错，以及出错的原因。
# 在操作系统提供的调用中，返回错误码非常常见。比如打开文件的函数open()，成功时返回文件描述符（就是一个整数），出错时返回-1。

#用错误码来表示是否出错十分不便，因为函数本身应该返回的正常结果和错误码混在一起，造成调用者必须用大量的代码来判断是否出错：
def foo():
    r = some_function()
    if r ==(-1):
        return (-1)
    return r

def bar():
    r = foo()
    if r ==(-1):
        print('Error')
    else:
        pass

#一旦出错，还要一级一级上报，直到某个函数可以处理该错误（比如，给用户输出一个错误信息）。

#所以高级语言通常都内置了一套try...except...finally...的错误处理机制，Python也不例外。
try:
    print('try....')
    r1 = 10/0
    print('result:',r1)
except ZeroDivisionError as e:
    print('except:',e)
finally:
    print('finally...')
print('END')

#当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，
#而是直接跳转至错误处理代码，即except语句块，执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。

#上面的代码在计算10 / 0时会产生一个除法运算错误：
'''
try...
except: division by zero
finally...
END
'''

#你还可以猜测，错误应该有很多种类，如果发生了不同类型的错误，应该由不同的except语句块处理。
# 没错，可以有多个except来捕获不同类型的错误：
try:
    print('try....')
    r1 = 10/0
    print('result:',r1)
except ZeroDivisionError as e:
    print('except:',e)
except ValueError as e:
    print('ValueError:',e)
finally:
    print('finally...')
print('END')

#Python的错误其实也是class，所有的错误类型都继承自BaseException，所以在使用except时需要注意的是，
# 它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：
try:
    foo()
except ValueError as e:
    print('ValueError')
except UnicodeError as e:
    print('UnicodeError')

#第二个except永远也捕获不到UnicodeError，因为UnicodeError是ValueError的子类，
# 如果有，也被第一个except给捕获了。

#调用栈

#如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。来看看<stdin>：
def foo1(s):
    return 10/int(s)

def bar1(s):
    return foo1(s) * 2

def main():
    bar1('0')
main() 
#出错并不可怕，可怕的是不知道哪里出错了。解读错误信息是定位错误的关键。我们从上往下可以看到整个错误的调用函数链：
#错误信息第1行：
#Traceback (most recent call last):
'''
告诉我们这是错误的跟踪信息。

第2~3行：

  File "<stdin>", line 11, in <module>
    main()
调用main()出错了，在代码文件<stdin>的第11行代码，但原因是第9行：

  File "<stdin>", line 9, in main
    bar('0')
调用bar('0')出错了，在代码文件<stdin>的第9行代码，但原因是第6行：

  File "<stdin>", line 6, in bar
    return foo(s) * 2
原因是return foo(s) * 2这个语句出错了，但这还不是最终原因，继续往下看：

  File "<stdin>", line 3, in foo
    return 10 / int(s)
原因是return 10 / int(s)这个语句出错了，这是错误产生的源头，因为下面打印了：

ZeroDivisionError: integer division or modulo by zero
根据错误类型ZeroDivisionError，我们判断，int(s)本身并没有出错，但是int(s)返回0，在计算10 / 0时出错，至此，找到错误源头。
'''

#记录错误

#如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。
#既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。

#Python内置的logging模块可以非常容易地记录错误信息：

import logging

def foo2(s):
    return 10/int(s)

def bar2(s):
    return foo1(s) * 2

def main():
    try:
        bar2('0')
    except Exception as e:
        logging.exception(e)

main()
print('End') 

#抛出错误

#因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。
#Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。

#如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例：
class FooError(ValueError):
    pass

def foo(s):
    n = int(s)
    if n==0:
        raise FooError('invalid value: %s' % s)
    return 10 / n

foo('0')


#练习
'''
运行下面的代码，根据异常信息进行分析，定位出错误源头，并修复：
from functools import reduce

def str2num(s):
    return int(s)

def calc(exp):
    ss = exp.split('+')
    ns = map(str2num, ss)
    return reduce(lambda acc, x: acc + x, ns)

def main():
    r = calc('100 + 200 + 345')
    print('100 + 200 + 345 =', r)
    r = calc('99 + 88 + 7.6')
    print('99 + 88 + 7.6 =', r)

main()
'''
from functools import reduce

def str2num(s):
    try:
        return int(s)
    except :
        return float(s)


def calc(exp):
    ss = exp.split('+')
    ns = map(str2num, ss)
    return reduce(lambda acc, x: acc + x, ns)

def main():
    r = calc('100 + 200 + 345')
    print('100 + 200 + 345 =', r)
    r = calc('99 + 88 + 7.6')
    print('99 + 88 + 7.6 =', r)

main()