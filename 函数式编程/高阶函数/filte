#!/usr/bin/env python
#-*- coding:utf-8 -*-
def oll(o):
    return o % 2 ==1

print(list(filter(oll,range(0,10))))
#和map()类似，filter()也接收一个函数和一个序列。
# 和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。

def none_oll(s):
    return s and s.strip()  #strip()用于移除字符串头尾指定的字符

#把一个序列中的空字符串删掉
print(list(filter(none_oll,['1','s',None,'w',' '])))


print('用filter求素数')

'''计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：

首先，列出从2开始的所有自然数，构造一个序列：

2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：

3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：

5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取新序列的第一个数5，然后用5把序列的5的倍数筛掉：

7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

不断筛下去，就可以得到所有的素数。
'''

def _oll_iter():
    b = 1
    while True :
        b = b +2
        yield b

def _not_divisible(n):
    return lambda x : x % n > 0     #这里的n时默认值，随n = next(it)而变化；
        #x = it = _oll_iter()（一开始）= next（filter(_not_divisible(n),it) ）
        # =next（filter(_not_divisible(n+2),next（filter(_not_divisible(n),it))）不断类推

def primes():
    yield 2
    it = _oll_iter()
    
    while True :
        n = next(it)
        yield n
        it = filter(_not_divisible(n),it)   #这里是帅选n后的生成器集；
        #如n=3时，筛选出不能余3的值，并且轮到下一次执行时会在筛选3的基础上再筛选5，
        # 然后才得到筛选后的生成器，以此类推，不断嵌套最后会得到余掉之前所有数的生成器
        
for n in primes():
    if n < 100:
        print(n)
    else:
        break


#回数是指从左向右读和从右向左读都是一样的数，例如12321，909。请利用filter()筛选出回数：
def is_palindrome(n):
    return str(n) == str(n)[::-1]



# 测试:
output = filter(is_palindrome, range(1, 1000))
print('1~1000:', list(output))
if list(filter(is_palindrome, range(1, 200))) == [
    1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 
    88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191
    ]:
    print('测试成功!')
else:
    print('测试失败!')