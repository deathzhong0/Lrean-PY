#!/usr/bin/env python
#-*- coding:utf-8 -*-

def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % (func.__name__))
        return func(*args, **kw)
    return wrapper

@log
def now():
    print('\n由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。')
    
f = now
print(f())

#函数对象有一个__name__属性，可以拿到函数的名字：
print(now.__name__)
print(f.__name__)

#现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，
# 但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
'''def log(func):
    def wrapper(*args,**kw):
        print('call %s():' % func.__name__)
        return func(*args,**kw)
    return wrapper


把@log放到now()函数的定义处，相当于执行了语句：

now = log(now)
由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，
只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。

wrapper()函数的参数定义是(*args, **kw)，因此，
wrapper()函数可以接受任意参数的调用。在wrapper()函数内，首先打印日志，再紧接着调用原始函数。
'''

def log1(text):
    def decorator(func1):
        def wrapper1(*arg1,**kw1):
            print('%s %s' % (text,func1.__name__))
            return func1(*arg1,**kw1)
        return wrapper1
    return decorator

@log1('execute')
def now1():
    print('2015-3-25')
f1=now1
print(f1())
#和两层嵌套的decorator相比，3层嵌套的效果是这样的：

# now = log('execute')(now)

#我们来剖析上面的语句，首先执行log('execute')，返回的是decorator函数，再调用返回的函数，
# 参数是now函数，返回值最终是wrapper函数。

#以上两种decorator的定义都没有问题，但还差最后一步。
# 因为我们讲了函数也是对象，它有__name__等属性，但你去看经过decorator装饰之后的函数，
# 它们的__name__已经从原来的'now'变成了'wrapper'：
#因为返回的那个wrapper()函数名字就是'wrapper'，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，
# 有些依赖函数签名的代码执行就会出错。
#不需要编写wrapper.__name__ = func.__name__这样的代码，Python内置的functools.wraps就是干这个事的，
# 所以，一个完整的decorator的写法如下：
import functools
def log2(text1):
    def decorator1(func2):
        @functools.wraps(func2)
        def wrapper2(*arg2,**kw2):
            print('%s %s' % (text1,func2.__name__))
            return func2(*arg2,**kw2)
        return wrapper2
    return decorator1

@log2('execute')
def now2():
    print('2019-8-9')
f2=now2
print(f2())



print('-'*100)
#请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：
import time,functools
def metric(fn):
    @functools.wraps(fn)
    def decorator2(*a,**b):
        t1 = time.time()
        result = fn(*a,**b)
        t2 =  time.time()
        print('%s executed in %0.3fs ms' % (fn.__name__,((t2-t1)*1000)))
        return result
    return decorator2


## 测试
@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y

@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z

f = fast(11, 22)
s = slow(11, 22, 33)

print(f)
if f != 33:
    print('测试失败!')
elif s != 7986:
    print('测试失败!')
else:
    print('测试成功')