#!/usr/bin/env python
#-*- coding:utf-8 -*-

#求和
def calc_sum(*args):
    ax = 0
    for n in args:
        ax = n + ax
    return ax 

#如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax +n
        return ax
    return sum
f = lazy_sum(1,2,3)
print(lazy_sum(1,2,3))
print(f())  #f调用结果时要带括号

#在这个例子中，我们在函数lazy_sum中又定义了函数sum，
# 并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，
# 当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
print('-'*50)

def count():
    fs = []
    for i in range(1,4):
        def f():
            return i*i
        fs.append(f)
    return fs
f1,f2,f3 = count()  #count（）有3个数，所有要3个参数才能赋予
print(f1(),'\n',f2(),'\n',f3())
#全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。
# 等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。
print("-"*50)

#返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
#如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，
# 无论该循环变量后续如何更改，已绑定到函数参数的值不变：
def count1():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1,4):
        fs.append(f(i))     #i会变化，先将i放入j后函数g就不会受到影响，
                            #g的生成器j不会再因i重新赋值而改变，并且g的生成器j相互不会影响
    return fs

f1,f2,f3 = count1()
print(f1(),'\n',f2(),'\n',f3())

print('*'*100,'\n','利用闭包返回一个计数器函数，每次调用它返回递增整数：')
#练习
#利用闭包返回一个计数器函数，每次调用它返回递增整数：
def createCounter():
    i = 0
    def counter():
        nonlocal i  #nonlocal引用外层的i
        i += 1 
        return i
    return counter
    



# 测试:
counterA = createCounter()
print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5
counterB = createCounter()
if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:
    print('测试通过!')
else:
    print('测试失败!')